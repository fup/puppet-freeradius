# -*- text -*-
#
#  $Id$

# Lightweight Directory Access Protocol (LDAP)
#
#  This module definition allows you to use LDAP for
#  authorization and authentication.
#
#  See raddb/sites-available/default for reference to the
#  ldap module in the authorize and authenticate sections.
#
#  However, LDAP can be used for authentication ONLY when the
#  Access-Request packet contains a clear-text User-Password
#  attribute.  LDAP authentication will NOT work for any other
#  authentication method.
#
#  This means that LDAP servers don't understand EAP.  If you
#  force "Auth-Type = LDAP", and then send the server a
#  request containing EAP authentication, then authentication
#  WILL NOT WORK.
#
#  The solution is to use the default configuration, which does
#  work.
#
#  Setting "Auth-Type = LDAP" is ALMOST ALWAYS WRONG.  We
#  really can't emphasize this enough.
#	
ldap {
	#
	#  Note that this needs to match the name in the LDAP
	#  server certificate, if you're using ldaps.
	server = "<%= @server %>"
	<%- if @identity %>
	identity = "<%= @identitiy %>"
	<%- end %>
	<%- if @password %>
	password = <%= @password %>
	<%- end %>
	basedn = "<%= @basedn %>"
	filter = "<%= @filter %>"
	<%- if @base_filter %>
	# base_filter = "(objectclass=radiusprofile)"
	base_filter = "<%= @base_filter %>"
	<%- end %>

	#  How many connections to keep open to the LDAP server.
	#  This saves time over opening a new LDAP socket for
	#  every authentication request.
	ldap_connections_number = <%= @ldap_connections_number %>

	#  How many times the connection can be used before
	#  being re-established. This is useful for things
	#  like load balancers, which may exhibit sticky
	#  behaviour without it. (0) is unlimited.
	max_uses = <%= @max_uses %>
	<%- if @port %>
	#  Port to connect on, defaults to 389. Setting this to
	#  636 will enable LDAPS if start_tls (see below) is not
	#  able to be used.
	port = <%= @port %>
	<%- end %>

	# seconds to wait for LDAP query to finish. default: 20
	timeout = <%= @timeout %>

	#  seconds LDAP server has to process the query (server-side
	#  time limit). default: 20
	#
	#  LDAP_OPT_TIMELIMIT is set to this value.
	timelimit = <%= @timelimit %>

	#
	#  seconds to wait for response of the server. (network
	#   failures) default: 10
	#
	#  LDAP_OPT_NETWORK_TIMEOUT is set to this value.
	net_timeout = <%= @net_timeout %>

	#
	#  This subsection configures the tls related items
	#  that control how FreeRADIUS connects to an LDAP
	#  server.  It contains all of the "tls_*" configuration
	#  entries used in older versions of FreeRADIUS.  Those
	#  configuration entries can still be used, but we recommend
	#  using these.
	#
	tls {
		# Set this to 'yes' to use TLS encrypted connections
		# to the LDAP database by using the StartTLS extended
		# operation.
		#			
		# The StartTLS operation is supposed to be
		# used with normal ldap connections instead of
		# using ldaps (port 636) connections
		start_tls = <%= @tls_start_tls %>
		
		<%- if @tls_cacertfile %>
		cacertfile	= <%= @tls_cacertfile %>
		<%- end %>
		<%- @tls_cacertdir %>
		cacertdir		= <%= tls_cacertdir %>
		<%- end %>
		<%- if @tls_certfile %>
		certfile		= <%= @tls_certfile %>
		<%- end %>
		<%- if @tls_keyfile %>
		keyfile		= <%= @tls_keyfile %>
		<%- end %>
		<%- if @tls_randfile %>
		randfile		= <%- @tls_randfile %>
		<%- end %>

		<%- if @tls_require_cert %>
		#  Certificate Verification requirements.  Can be:
		#    "never" (don't even bother trying)
		#    "allow" (try, but don't fail if the cerificate
		#		can't be verified)
		#    "demand" (fail if the certificate doesn't verify.)
		#
		#	The default is "allow"
		#require_cert	= "demand"
		require_cert	= "<%= @tls_require_cert %>"
		<%- end %>
	}

	<%- if @default_profile %>
	# default_profile = "cn=radprofile,ou=dialup,o=My Org,c=UA"
	default_profile = "<%- @default_profile %>"
	<%- end %>
	<%- if @profile_attribute %>
	# profile_attribute = "radiusProfileDn"
	profile_attribute = "<%= profile_attribute %>"
	<%- end %>
	<%- if @access_attr %>
	# access_attr = "dialupAccess"
	access_attr = "<%= access_attr %>"
	<%- end %>

	# Mapping of RADIUS dictionary attributes to LDAP
	# directory attributes.
	dictionary_mapping = <%= @dictionary_mapping%>
	<%- if @password_attribute %>
	#  Set password_attribute = nspmPassword to get the
	#  user's password from a Novell eDirectory
	#  backend. This will work ONLY IF FreeRADIUS has been
	#  built with the --with-edir configure option.
	#
	#  See also the following links:
	#
	#  http://www.novell.com/coolsolutions/appnote/16745.html
	#  https://secure-support.novell.com/KanisaPlatform/Publishing/558/3009668_f.SAL_Public.html
	#
	#  Novell may require TLS encrypted sessions before returning
	#  the user's password.
	#
	# password_attribute = userPassword
	password_attribute = <%= @password_attribute %>
	<%- end %>

	#  Un-comment the following to disable Novell
	#  eDirectory account policy check and intruder
	#  detection. This will work *only if* FreeRADIUS is
	#  configured to build with --with-edir option.
	#
	edir_account_policy_check = <%= @edir_account_policy_check %>

	#
	#  Group membership checking.  Disabled by default.
	#
	<%- if @groupname_attribute %>
	# groupname_attribute = cn
	groupname_attribute = <%= @groupname_attribute %>
	<% -end %>
	<%- if @groupmembership_filter %>
	# groupmembership_filter = "(|(&(objectClass=GroupOfNames)(member=%{control:Ldap-UserDn}))(&(objectClass=GroupOfUniqueNames)(uniquemember=%{control:Ldap-UserDn})))"
	groupmembership_filter = "<%= @groupmembership_filter %>"
	<%- end %>
	<%- if @groupmembership_attribute %>
	# groupmembership_attribute = radiusGroupName
	groupmembership_attribute = <%= @groupmembership_attribute %>
	<%- end %>

	<%- if @compare_check_items %>
	# compare_check_items = yes
	compare_check_items = <%= @compare_check_items %>
	<%- end %>
	<%- if @do_xlat %>
	# do_xlat = yes
	do_xlat = <%= @do_xlat %>
	<%- end %>
	<%- @access_attr_used_for_allow %>
	# access_attr_used_for_allow = yes
	access_attr_used_for_allow = <%= access_attr_used_for_allow %>
	<%- end %>

	#
	#  The following two configuration items are for Active Directory
	#  compatibility.  If you see the helpful "operations error"
	#  being returned to the LDAP module, uncomment the next
	#  two lines.
	#
	<%- if @chase_referrals %>
	# chase_referrals = yes
	chase_referrals = <%= @chase_referrals %>
	<%- end %>
	<%- if @rebind %>
	# rebind = yes
	rebind = <%= @rebind %>
	<%- end %>
	<%- if @set_auth_type %>
	#
	#  By default, if the packet contains a User-Password,
	#  and no other module is configured to handle the
	#  authentication, the LDAP module sets itself to do
	#  LDAP bind for authentication.
	#
	#  THIS WILL ONLY WORK FOR PAP AUTHENTICATION.
	#
	#  THIS WILL NOT WORK FOR CHAP, MS-CHAP, or 802.1x (EAP). 
	#
	#  You can disable this behavior by setting the following
	#  configuration entry to "no".
	#
	#  allowed values: {no, yes}
	# set_auth_type = yes
	set_auth_type = <%= @set_auth_type %>
	<%- end %>
	<%- if @ldap_debug %>
	#  ldap_debug: debug flag for LDAP SDK
	#  (see OpenLDAP documentation).  Set this to enable
	#  huge amounts of LDAP debugging on the screen.
	#  You should only use this if you are an LDAP expert.
	#
	#	default: 0x0000 (no debugging messages)
	#	Example:(LDAP_DEBUG_FILTER+LDAP_DEBUG_CONNS)
	#ldap_debug = 0x0028 
	ldap_debug = <%= @ldap_debug %>
	<%- end %>

	#
	#  Keepalive configuration.  This MAY NOT be supported by your
	#  LDAP library.  If these configuration entries appear in the
	#  output of "radiusd -X", then they are supported.  Otherwise,
	#  they are unsupported, and changing them will do nothing.
	#
	keepalive {
		# LDAP_OPT_X_KEEPALIVE_IDLE
		idle = <%= @keepalive_idle %>

		# LDAP_OPT_X_KEEPALIVE_PROBES
		probes = <%= @keepalive_probes %>

		# LDAP_OPT_X_KEEPALIVE_INTERVAL
		interval = <%= @keepalive_interval %>
	}
}
